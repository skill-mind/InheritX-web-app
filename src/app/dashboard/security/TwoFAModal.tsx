"use client";

import React, { useState, useRef } from "react";
import Image from "next/image";

interface TwoFAModalProps {
  open: boolean;
  onClose: () => void;
  qrCodeUrl: string;
  manualKey: string;
  onContinue: (code: string) => void;
}

const TwoFAModal: React.FC<TwoFAModalProps> = ({
  open,
  onClose,
  qrCodeUrl,
  manualKey,
  onContinue,
}) => {
  const [code, setCode] = useState(["", "", "", "", "", ""]);
  const [touched, setTouched] = useState(false);
  const isCodeValid = code.every((c) => c.length === 1 && /[0-9]/.test(c));
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  if (!open) return null;

  const handleCodeChange = (idx: number, value: string) => {
    if (value.length > 1) return;
    if (value && !/^[0-9]$/.test(value)) return;
    const newCode = [...code];
    newCode[idx] = value;
    setCode(newCode);
    if (value && idx < 5) {
      inputRefs.current[idx + 1]?.focus();
    }
  };

  const handleCodeKeyDown = (
    idx: number,
    e: React.KeyboardEvent<HTMLInputElement>
  ) => {
    if (e.key === "Backspace" && !code[idx] && idx > 0) {
      inputRefs.current[idx - 1]?.focus();
    }
  };

  const handleContinue = () => {
    setTouched(true);
    if (isCodeValid) {
      onContinue(code.join(""));
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-[#161E22CC] backdrop-blur-sm">
      <div className="bg-[#161E22] border border-[#2A3338] rounded-2xl p-4 md:p-10 w-full max-w-3xl flex flex-col items-center shadow-xl relative mx-2">
        <div className="w-full flex items-center gap-2 mb-[3rem] mt-6 md:mt-0">
          <button
            onClick={onClose}
            className="text-[#BFC6C8] text-[15px] flex items-center gap-3"
          >
            <Image
              src="/assets/icons/back.svg"
              alt="back"
              width={15}
              height={12.5}
            />
            <span className="font-medium text-[#92A5A8] text-[14px]">
              ENABLE TWO-FACTOR AUTHENTICATION
            </span>
          </button>
        </div>
        <h2 className="text-xl md:text-2xl font-medium text-[#FCFFFF] mb-2 mt-2 text-center">
          Enable 2FA on InheritX
        </h2>
        <p className="text-[#92A5A8] text-[12px] md:text-[12px] text-center mb-6 font-normal">
          Scan this QR code with your authenticator app (Google Authenticator,
          Authy, etc.) or copy the manual key
        </p>
        <div className="flex flex-col items-center mb-4">
          <div className="bg-white rounded-xl p-3 md:p-4 mb-2 flex items-center justify-center">
            <Image
              src={qrCodeUrl}
              alt="2FA QR Code"
              width={180}
              height={180}
              className="w-[140px] h-[140px] md:w-[180px] md:h-[180px] object-contain"
            />
          </div>
          <div className="text-[#92A5A8] text-[14px] mt-2">
            Manual Key:{" "}
            <span className="text-[#FCFFFF] font-semibold text-[16px] ml-2">
              {manualKey}
            </span>
          </div>
        </div>
        <div className="w-full flex flex-col items-center mb-2">
          <span className="text-[#92A5A8] text-[13px] mb-2">
            Enter the 6-digit code generated by your authenticator app
          </span>
          <div className="flex gap-3 md:gap-4 w-full justify-center mb-2">
            {code.map((val, idx) => (
              <input
                key={idx}
                ref={(el) => {
                  inputRefs.current[idx] = el;
                }}
                id={`2fa-code-${idx}`}
                type="text"
                inputMode="numeric"
                maxLength={1}
                value={val}
                onChange={(e) => handleCodeChange(idx, e.target.value)}
                onKeyDown={(e) => handleCodeKeyDown(idx, e)}
                onBlur={() => setTouched(true)}
                className={`w-10 h-10 md:w-12 md:h-12 rounded-[10px] border border-[#232B36] bg-[#161E22] text-center text-2xl text-[#FCFFFF] outline-none transition-all ${
                  touched && !isCodeValid ? "border-red-500" : ""
                }`}
                style={{ WebkitAppearance: "none", MozAppearance: "textfield" }}
              />
            ))}
          </div>
          {touched && !isCodeValid && (
            <span className="text-red-500 text-xs mt-1 block">
              Enter a valid 6-digit code
            </span>
          )}
        </div>
        <div className="flex w-full gap-4 mt-6">
          <button
            className="flex-1 bg-[#232B36] text-white py-3 rounded-full font-medium text-base transition-colors hover:bg-[#232B36]/80"
            onClick={onClose}
            type="button"
          >
            Cancel
          </button>
          <button
            className={`flex-1 bg-[#33C5E0] text-[#161E22] py-3 rounded-full font-medium text-base transition-colors ${
              isCodeValid
                ? "hover:bg-[#33C5E0]/90"
                : "opacity-60 cursor-not-allowed"
            }`}
            onClick={handleContinue}
            type="button"
            disabled={!isCodeValid}
          >
            Continue
          </button>
        </div>
      </div>
    </div>
  );
};

export default TwoFAModal;
